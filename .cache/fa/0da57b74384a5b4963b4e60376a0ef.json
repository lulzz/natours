{"id":"../../node_modules/axios/lib/core/Axios.js","dependencies":[{"name":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\package.json","includedInParent":true,"mtime":1575481576839},{"name":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\package.json","includedInParent":true,"mtime":1575211844068},{"name":"./../utils","loc":{"line":3,"column":20},"parent":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\utils.js"},{"name":"../helpers/buildURL","loc":{"line":4,"column":23},"parent":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\helpers\\buildURL.js"},{"name":"./InterceptorManager","loc":{"line":5,"column":33},"parent":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\core\\InterceptorManager.js"},{"name":"./dispatchRequest","loc":{"line":6,"column":30},"parent":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\core\\dispatchRequest.js"},{"name":"./mergeConfig","loc":{"line":7,"column":26},"parent":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\core\\mergeConfig.js"}],"generated":{"js":"'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n  config.method = config.method ? config.method.toLowerCase() : 'get';\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n"},"sourceMaps":null,"error":null,"hash":"aad014102856e39701182d8e38a6c375","cacheData":{"env":{}}}