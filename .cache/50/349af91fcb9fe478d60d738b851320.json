{"id":"../../node_modules/axios/lib/defaults.js","dependencies":[{"name":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\package.json","includedInParent":true,"mtime":1575481576839},{"name":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\package.json","includedInParent":true,"mtime":1575211844068},{"name":"./utils","loc":{"line":3,"column":20},"parent":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\defaults.js","resolved":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\utils.js"},{"name":"./helpers/normalizeHeaderName","loc":{"line":4,"column":34},"parent":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\defaults.js","resolved":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\helpers\\normalizeHeaderName.js"},{"name":"./adapters/http","loc":{"line":21,"column":22},"parent":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\defaults.js","resolved":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\adapters\\xhr.js"},{"name":"./adapters/xhr","loc":{"line":24,"column":22},"parent":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\defaults.js","resolved":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\adapters\\xhr.js"},{"name":"process","parent":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\axios\\lib\\defaults.js","resolved":"E:\\2_BACKEND\\NODEJS\\PROJECTS\\natours\\node_modules\\process\\browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  // Only Node.JS has a process variable that is of [[Class]] process\n  if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  } else if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n"},"sourceMaps":null,"error":null,"hash":"84aa67ed3cad5ec14a8f888e0bb42336","cacheData":{"env":{}}}